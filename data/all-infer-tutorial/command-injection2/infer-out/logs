[307857][      debug] Loading models took 15.762ms
[307857][environment] CWD = /home/wooseok/workspace/infer-experiment
[307857][environment] No .inferconfig file found
[307857][environment] Project root = /home/wooseok/workspace/infer-experiment
[307857][environment] INFER_ARGS =   @/tmp/args.tmp.cc23e9  ++Contents of '/tmp/args.tmp.cc23e9':
[307857][environment]                                         run --api-misuse --no-starvation
[307857][environment]                                         --no-self-in-block --no-uninit
[307857][environment]                                         --no-siof --no-racerd --no-liveness
[307857][environment]                                         --no-inefficient-keyset-iterator
[307857][environment]                                         --no-fragment-retains-view
[307857][environment]                                         --no-biabduction --debug -j 1
[307857][environment]                                         --bo-debug 3
[307857][environment]                                       
[307857][environment] 
[307857][environment] command line arguments:   /home/wooseok/workspace/infer-experiment/infer/infer/bin/infer
[307857][environment]                           run --api-misuse --no-starvation --no-self-in-block
[307857][environment]                           --no-uninit --no-siof --no-racerd --no-liveness
[307857][environment]                           --no-inefficient-keyset-iterator
[307857][environment]                           --no-fragment-retains-view --no-biabduction --debug
[307857][environment]                           -j 1 --bo-debug 3 -- clang -c
[307857][environment]                           tutorial/command-injection2.c
[307857][environment] Available memory at startup: 155398 MB
[307857][environment] Active checkers: api-misuse (C/C++/ObjC), bufferoverrun-analysis (C/C++/ObjC, Java)
[307857][   progress] Logs in /home/wooseok/workspace/infer-experiment/infer-out/logs
[307857][environment] Scheduler: file
[307857][environment] Cores used: 1
[307857][environment] Infer version v1.0.0-c13db4e62
[307857][environment] Copyright 2009 - present Facebook. All Rights Reserved.
[307857][environment] Driver mode:
[307857][environment] Clang driver mode:
[307857][environment] prog = 'clang'
[307857][environment] args =   -c tutorial/command-injection2.c
[307857][   progress] Capturing in make/cc mode...
[307857][      debug] Clang options stored in file /home/wooseok/workspace/infer-experiment/infer-out/tmp/clang_command_.tmp.192f9a.txt
[307857][      debug] clang -### invocation: '/home/wooseok/workspace/infer-experiment/infer/infer/bin/../../facebook-clang-plugins/clang/install/bin/clang' '@/home/wooseok/workspace/infer-experiment/infer-out/tmp/clang_command_.tmp.192f9a.txt' 2>&1
[307857][      debug] 
[307857][      debug] *** Beginning capture of file /home/wooseok/workspace/infer-experiment/tutorial/command-injection2.c ***
[307857][      debug] Clang options stored in file /home/wooseok/workspace/infer-experiment/infer-out/tmp/clang_command_.tmp.cea981.txt
[307857][      debug] Clang options stored in file /home/wooseok/workspace/infer-experiment/infer-out/tmp/clang_command_.tmp.0d3eee.txt
[307857][      debug] Processing command-injection2.cStart linting, translating the AST of stdin of tutorial/command-injection2.c
[307857][      debug] Loading the following linters files: /home/wooseok/workspace/infer-experiment/infer/infer/bin/../lib/linter_rules/linters.al
[307857][      debug] Loading linters rules from /home/wooseok/workspace/infer-experiment/infer/infer/bin/../lib/linter_rules/linters.al
[307857][      debug] 	Parsed identifier 'DIRECT_ATOMIC_PROPERTY_ACCESS'
[307857][      debug] 	Parsed identifier 'report_when'
[307857][      debug] 	Parsed identifier 'context_in_synchronized_block'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed NOT
[307857][      debug] 	Parsed identifier 'is_ivar_atomic'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'is_method_property_accessor_of_ivar'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed NOT
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'is_objc_constructor'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed NOT
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'is_objc_dealloc'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed NOT
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'ObjCIvarRefExpr'
[307857][      debug] 	Parsed InNode
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'message'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'suggestion'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'severity'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 
[307857][      debug] Parsed checker definition
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: DIRECT_ATOMIC_PROPERTY_ACCESS
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE ObjCIvarRefExpr: (((((NOT(context_in_synchronized_block()) AND is_ivar_atomic()) AND NOT(is_method_property_accessor_of_ivar())) AND NOT(is_objc_constructor())) AND NOT(is_objc_dealloc())))
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Direct access to ivar %ivar_name% of an atomic property
[307857][      debug] 
[307857][      debug]     suggestion=  
[307857][      debug]     Accessing an ivar of an atomic property makes the property nonatomic.
[307857][      debug] 
[307857][      debug]     severity=  
[307857][      debug]     WARNING
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 	Parsed identifier 'ASSIGN_POINTER_WARNING'
[307857][      debug] 	Parsed identifier 'report_when'
[307857][      debug] 	Parsed identifier 'is_assign_property'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed identifier 'is_property_pointer_type'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'ObjCPropertyDecl'
[307857][      debug] 	Parsed InNode
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'message'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'suggestion'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'severity'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 
[307857][      debug] Parsed checker definition
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: ASSIGN_POINTER_WARNING
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE ObjCPropertyDecl: ((is_assign_property() AND is_property_pointer_type()))
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Property %decl_name% is a pointer type marked with the `assign` attribute
[307857][      debug] 
[307857][      debug]     suggestion=  
[307857][      debug]     Use a different attribute like `strong` or `weak`.
[307857][      debug] 
[307857][      debug]     severity=  
[307857][      debug]     WARNING
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 	Parsed identifier 'BAD_POINTER_COMPARISON'
[307857][      debug] 	Parsed identifier 'bool_op'
[307857][      debug] 	Parsed formula identifier 'bool_op'
[307857][      debug] 	Parsed identifier 'is_binop_with_kind'
[307857][      debug] 	Parsed string constant 'LAnd'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed identifier 'is_binop_with_kind'
[307857][      debug] 	Parsed string constant 'LOr'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed identifier 'is_unop_with_kind'
[307857][      debug] 	Parsed string constant 'LNot'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed identifier 'is_unop_with_kind'
[307857][      debug] 	Parsed string constant 'LNot'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'comparison_with_integral'
[307857][      debug] 	Parsed formula identifier 'comparison_with_integral'
[307857][      debug] 	Parsed identifier 'is_binop_with_kind'
[307857][      debug] 	Parsed string constant 'EQ'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed identifier 'is_binop_with_kind'
[307857][      debug] 	Parsed string constant 'NE'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed identifier 'is_binop_with_kind'
[307857][      debug] 	Parsed string constant 'GT'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed identifier 'is_binop_with_kind'
[307857][      debug] 	Parsed string constant 'GE'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed identifier 'is_binop_with_kind'
[307857][      debug] 	Parsed string constant 'LT'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed identifier 'is_binop_with_kind'
[307857][      debug] 	Parsed string constant 'LE'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed identifier 'is_node'
[307857][      debug] 	Parsed string constant 'ImplicitCastExpr'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed identifier 'has_type'
[307857][      debug] 	Parsed string constant 'NSNumber *'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'has_cast_kind'
[307857][      debug] 	Parsed string constant 'IntegralToPointer'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed EX
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'root_is_stmt_expecting_bool'
[307857][      debug] 	Parsed formula identifier 'root_is_stmt_expecting_bool'
[307857][      debug] 	Parsed identifier 'is_node'
[307857][      debug] 	Parsed string constant 'IfStmt'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed identifier 'is_node'
[307857][      debug] 	Parsed string constant 'ForStmt'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed identifier 'is_node'
[307857][      debug] 	Parsed string constant 'WhileStmt'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'use_num_as_bool'
[307857][      debug] 	Parsed formula identifier 'use_num_as_bool'
[307857][      debug] 	Parsed identifier 'bool_op'
[307857][      debug] 	Parsed formula identifier 'bool_op'
[307857][      debug] 	Parsed identifier 'root_is_stmt_expecting_bool'
[307857][      debug] 	Parsed formula identifier 'root_is_stmt_expecting_bool'
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed identifier 'has_type'
[307857][      debug] 	Parsed string constant 'NSNumber *'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed EX
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'bad_conditional'
[307857][      debug] 	Parsed formula identifier 'bad_conditional'
[307857][      debug] 	Parsed identifier 'is_node'
[307857][      debug] 	Parsed string constant 'ConditionalOperator'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed identifier 'has_type'
[307857][      debug] 	Parsed string constant 'NSNumber *'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed EX WITH-TRANSITION 'Cond'
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'report_when'
[307857][      debug] 	Parsed identifier 'use_num_as_bool'
[307857][      debug] 	Parsed formula identifier 'use_num_as_bool'
[307857][      debug] 	Parsed identifier 'comparison_with_integral'
[307857][      debug] 	Parsed formula identifier 'comparison_with_integral'
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed identifier 'bad_conditional'
[307857][      debug] 	Parsed formula identifier 'bad_conditional'
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'message'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'suggestion'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 
[307857][      debug] Parsed checker definition
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: BAD_POINTER_COMPARISON
[307857][      debug]     bool_op=  
[307857][      debug]     (((is_binop_with_kind(LAnd) OR is_binop_with_kind(LOr)) OR is_unop_with_kind(LNot)) OR is_unop_with_kind(LNot))
[307857][      debug] 
[307857][      debug]     comparison_with_integral=  
[307857][      debug]     ((((((is_binop_with_kind(EQ) OR is_binop_with_kind(NE)) OR is_binop_with_kind(GT)) OR is_binop_with_kind(GE)) OR is_binop_with_kind(LT)) OR is_binop_with_kind(LE)) AND EX[->_](((is_node(ImplicitCastExpr) AND has_type(NSNumber *)) AND has_cast_kind(IntegralToPointer))))
[307857][      debug] 
[307857][      debug]     root_is_stmt_expecting_bool=  
[307857][      debug]     ((is_node(IfStmt) OR is_node(ForStmt)) OR is_node(WhileStmt))
[307857][      debug] 
[307857][      debug]     use_num_as_bool=  
[307857][      debug]     ((bool_op() OR root_is_stmt_expecting_bool()) AND EX[->_](has_type(NSNumber *)))
[307857][      debug] 
[307857][      debug]     bad_conditional=  
[307857][      debug]     (is_node(ConditionalOperator) AND EX[->Cond](has_type(NSNumber *)))
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     ((use_num_as_bool() OR comparison_with_integral()) OR bad_conditional())
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Implicitly checking whether NSNumber pointer is nil or comparing to integral value
[307857][      debug] 
[307857][      debug]     suggestion=  
[307857][      debug]     Did you mean to use/compare against the unboxed value instead? Please either explicitly compare the NSNumber instance to nil, or use one of the NSNumber accessors before the comparison.
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 	Parsed identifier 'STRONG_DELEGATE_WARNING'
[307857][      debug] 	Parsed identifier 'name_contains_delegate'
[307857][      debug] 	Parsed formula identifier 'name_contains_delegate'
[307857][      debug] 	Parsed identifier 'declaration_has_name'
[307857][      debug] 	Parsed regular expression '[dD]elegate'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'name_does_not_contain_delegates'
[307857][      debug] 	Parsed formula identifier 'name_does_not_contain_delegates'
[307857][      debug] 	Parsed identifier 'declaration_has_name'
[307857][      debug] 	Parsed regular expression '[dD]elegates'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed NOT
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'name_does_not_contains_queue'
[307857][      debug] 	Parsed formula identifier 'name_does_not_contains_queue'
[307857][      debug] 	Parsed identifier 'declaration_has_name'
[307857][      debug] 	Parsed regular expression '[qQ]ueue'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed NOT
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'report_when'
[307857][      debug] 	Parsed identifier 'name_contains_delegate'
[307857][      debug] 	Parsed formula identifier 'name_contains_delegate'
[307857][      debug] 	Parsed identifier 'name_does_not_contain_delegates'
[307857][      debug] 	Parsed formula identifier 'name_does_not_contain_delegates'
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'name_does_not_contains_queue'
[307857][      debug] 	Parsed formula identifier 'name_does_not_contains_queue'
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'is_strong_property'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'ObjCPropertyDecl'
[307857][      debug] 	Parsed InNode
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'message'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'suggestion'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 
[307857][      debug] Parsed checker definition
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: STRONG_DELEGATE_WARNING
[307857][      debug]     name_contains_delegate=  
[307857][      debug]     declaration_has_name([dD]elegate)
[307857][      debug] 
[307857][      debug]     name_does_not_contain_delegates=  
[307857][      debug]     NOT(declaration_has_name([dD]elegates))
[307857][      debug] 
[307857][      debug]     name_does_not_contains_queue=  
[307857][      debug]     NOT(declaration_has_name([qQ]ueue))
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE ObjCPropertyDecl: ((((name_contains_delegate() AND name_does_not_contain_delegates()) AND name_does_not_contains_queue()) AND is_strong_property()))
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Property or ivar %decl_name% declared strong
[307857][      debug] 
[307857][      debug]     suggestion=  
[307857][      debug]     In general delegates should be declared weak or assign.
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 	Parsed identifier 'GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL'
[307857][      debug] 	Parsed identifier 'is_global_but_not_const_variable'
[307857][      debug] 	Parsed formula identifier 'is_global_but_not_const_variable'
[307857][      debug] 	Parsed identifier 'is_objc_extension'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed identifier 'is_global_var'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'is_const_expr_var'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed NOT
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'is_init_integral_constant_expr'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed NOT
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'makes_an_expensive_call'
[307857][      debug] 	Parsed formula identifier 'makes_an_expensive_call'
[307857][      debug] 	Parsed identifier 'is_node'
[307857][      debug] 	Parsed string constant 'CallExpr'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed identifier 'call_function'
[307857][      debug] 	Parsed string constant 'CGPointMake'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed NOT
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'is_node'
[307857][      debug] 	Parsed string constant 'CXXTemporaryObjectExpr'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed identifier 'is_node'
[307857][      debug] 	Parsed string constant 'CXXMemberCallExpr'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed identifier 'is_node'
[307857][      debug] 	Parsed string constant 'CXXOperatorCallExpr'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed identifier 'is_node'
[307857][      debug] 	Parsed string constant 'ObjCMessageExpr'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'is_initialized_with_expensive_call'
[307857][      debug] 	Parsed formula identifier 'is_initialized_with_expensive_call'
[307857][      debug] 	Parsed identifier 'VarDecl'
[307857][      debug] 	Parsed identifier 'makes_an_expensive_call'
[307857][      debug] 	Parsed formula identifier 'makes_an_expensive_call'
[307857][      debug] 	Parsed EF
[307857][      debug] 	Parsed ET with transition 'InitExpr'
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'report_when'
[307857][      debug] 	Parsed identifier 'is_global_but_not_const_variable'
[307857][      debug] 	Parsed formula identifier 'is_global_but_not_const_variable'
[307857][      debug] 	Parsed identifier 'is_initialized_with_expensive_call'
[307857][      debug] 	Parsed formula identifier 'is_initialized_with_expensive_call'
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'VarDecl'
[307857][      debug] 	Parsed InNode
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'message'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'suggestion'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 
[307857][      debug] Parsed checker definition
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL
[307857][      debug]     is_global_but_not_const_variable=  
[307857][      debug]     (((is_objc_extension() AND is_global_var()) AND NOT(is_const_expr_var())) AND NOT(is_init_integral_constant_expr()))
[307857][      debug] 
[307857][      debug]     makes_an_expensive_call=  
[307857][      debug]     (((((is_node(CallExpr) AND NOT(call_function(CGPointMake))) OR is_node(CXXTemporaryObjectExpr)) OR is_node(CXXMemberCallExpr)) OR is_node(CXXOperatorCallExpr)) OR is_node(ObjCMessageExpr))
[307857][      debug] 
[307857][      debug]     is_initialized_with_expensive_call=  
[307857][      debug]     ET[VarDecl][InitExpr](EF[->_](makes_an_expensive_call()))
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE VarDecl: ((is_global_but_not_const_variable() AND is_initialized_with_expensive_call()))
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Global variable %decl_name% is initialized using a function or method call
[307857][      debug] 
[307857][      debug]     suggestion=  
[307857][      debug]     If the function/method call is expensive, it can affect the starting time of the app.
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 	Parsed identifier 'CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK'
[307857][      debug] 	Parsed identifier 'capture_reference'
[307857][      debug] 	Parsed formula identifier 'capture_reference'
[307857][      debug] 	Parsed identifier 'is_node'
[307857][      debug] 	Parsed string constant 'BlockDecl'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed identifier 'captures_cxx_references'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed EX
[307857][      debug] 	Parsed identifier 'BlockExpr'
[307857][      debug] 	Parsed InNode
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'block_definition_capture_reference'
[307857][      debug] 	Parsed formula identifier 'block_definition_capture_reference'
[307857][      debug] 	Parsed identifier 'capture_reference'
[307857][      debug] 	Parsed formula identifier 'capture_reference'
[307857][      debug] 	Parsed EF
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'variable_initialized_with_block'
[307857][      debug] 	Parsed formula identifier 'variable_initialized_with_block'
[307857][      debug] 	Parsed identifier 'VarDecl'
[307857][      debug] 	Parsed identifier 'block_definition_capture_reference'
[307857][      debug] 	Parsed formula identifier 'block_definition_capture_reference'
[307857][      debug] 	Parsed ET with transition 'InitExpr'
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'variable_block_definition'
[307857][      debug] 	Parsed formula identifier 'variable_block_definition'
[307857][      debug] 	Parsed identifier 'DeclRefExpr'
[307857][      debug] 	Parsed identifier 'variable_initialized_with_block'
[307857][      debug] 	Parsed formula identifier 'variable_initialized_with_block'
[307857][      debug] 	Parsed ET with transition 'PointerToDecl'
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'report_when'
[307857][      debug] 	Parsed identifier 'has_no_escape_attribute'
[307857][      debug] 	Parsed formula identifier 'has_no_escape_attribute'
[307857][      debug] 	Parsed NOT
[307857][      debug] 	Parsed identifier 'block_definition_capture_reference'
[307857][      debug] 	Parsed formula identifier 'block_definition_capture_reference'
[307857][      debug] 	Parsed identifier 'variable_block_definition'
[307857][      debug] 	Parsed formula identifier 'variable_block_definition'
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'CallExpr'
[307857][      debug] 	Parsed InNode
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'message'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'suggestion'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'severity'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'mode'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 
[307857][      debug] Parsed checker definition
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK
[307857][      debug]     capture_reference=  
[307857][      debug]     IN-NODE BlockExpr: (EX[->_]((is_node(BlockDecl) AND captures_cxx_references())))
[307857][      debug] 
[307857][      debug]     block_definition_capture_reference=  
[307857][      debug]     EF[->_](capture_reference())
[307857][      debug] 
[307857][      debug]     variable_initialized_with_block=  
[307857][      debug]     ET[VarDecl][InitExpr](block_definition_capture_reference())
[307857][      debug] 
[307857][      debug]     variable_block_definition=  
[307857][      debug]     ET[DeclRefExpr][PointerToDecl](variable_initialized_with_block())
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE CallExpr: ((NOT(has_no_escape_attribute()) AND (block_definition_capture_reference() OR variable_block_definition())))
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     C++ Reference variable(s) %cxx_ref_captured_in_block% captured by Objective-C block
[307857][      debug] 
[307857][      debug]     suggestion=  
[307857][      debug]     This will very likely cause a crash because C++ References are unmanaged and may be invalid by the time the block executes.
[307857][      debug] 
[307857][      debug]     severity=  
[307857][      debug]     ERROR
[307857][      debug] 
[307857][      debug]     mode=  
[307857][      debug]     ON
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 	Parsed identifier 'POINTER_TO_INTEGRAL_IMPLICIT_CAST'
[307857][      debug] 	Parsed identifier 'report_when'
[307857][      debug] 	Parsed identifier 'has_cast_kind'
[307857][      debug] 	Parsed string constant 'PointerToIntegral'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed identifier 'ImplicitCastExpr'
[307857][      debug] 	Parsed InNode
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'message'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'doc_url'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 
[307857][      debug] Parsed checker definition
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: POINTER_TO_INTEGRAL_IMPLICIT_CAST
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE ImplicitCastExpr: (has_cast_kind(PointerToIntegral))
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Implicit conversion from %child_type% to %type% in usage of %name%
[307857][      debug] 
[307857][      debug]     doc_url=  
[307857][      debug]     https://clang.llvm.org/docs/DiagnosticsReference.html#wint-conversion
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 	Parsed identifier 'POINTER_TO_CONST_OBJC_CLASS'
[307857][      debug] 	Parsed identifier 'name'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'report_when'
[307857][      debug] 	Parsed identifier 'is_decl'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed identifier 'has_type_const_ptr_to_objc_class'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'message'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'suggestion'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'severity'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'mode'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 
[307857][      debug] Parsed checker definition
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: POINTER_TO_CONST_OBJC_CLASS
[307857][      debug]     name_hum_readable=  
[307857][      debug]     Pointer To const Objective-C Class
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     (is_decl() AND has_type_const_ptr_to_objc_class())
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     `const %class_name%*` may not mean what you want:
                   it represents a mutable pointer pointing to an Objective-C
                   class where the ivars cannot be changed.
[307857][      debug] 
[307857][      debug]     suggestion=  
[307857][      debug]     Consider using `%class_name% *const` instead, meaning
                      the destination of the pointer cannot be changed.
[307857][      debug] 
[307857][      debug]     severity=  
[307857][      debug]     WARNING
[307857][      debug] 
[307857][      debug]     mode=  
[307857][      debug]     ON
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 	Parsed identifier 'DISCOURAGED_WEAK_PROPERTY_CUSTOM_SETTER'
[307857][      debug] 	Parsed identifier 'has_body'
[307857][      debug] 	Parsed formula identifier 'has_body'
[307857][      debug] 	Parsed True
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed EX with transition 'Body'
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'is_weak_property_setter'
[307857][      debug] 	Parsed formula identifier 'is_weak_property_setter'
[307857][      debug] 	Parsed string constant 'setter'
[307857][      debug] 	Parsed identifier 'is_weak_property'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed EX with transition 'AccessorForProperty setter'
[307857][      debug] 	Parsed LET clause
[307857][      debug] 	Parsed identifier 'report_when'
[307857][      debug] 	Parsed identifier 'has_body'
[307857][      debug] 	Parsed formula identifier 'has_body'
[307857][      debug] 	Parsed identifier 'is_weak_property_setter'
[307857][      debug] 	Parsed formula identifier 'is_weak_property_setter'
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'ObjCMethodDecl'
[307857][      debug] 	Parsed InNode
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'message'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'severity'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'mode'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 
[307857][      debug] Parsed checker definition
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: DISCOURAGED_WEAK_PROPERTY_CUSTOM_SETTER
[307857][      debug]     has_body=  
[307857][      debug]     EX[->Body](True)
[307857][      debug] 
[307857][      debug]     is_weak_property_setter=  
[307857][      debug]     EX[->AccessorForProperty setter](is_weak_property())
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE ObjCMethodDecl: ((has_body() AND is_weak_property_setter()))
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Custom setters are not called when ARC sets weak properties to nil.
[307857][      debug] 
[307857][      debug]     severity=  
[307857][      debug]     WARNING
[307857][      debug] 
[307857][      debug]     mode=  
[307857][      debug]     OFF
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 	Parsed identifier 'WRONG_SCOPE_FOR_DISPATCH_ONCE_T'
[307857][      debug] 	Parsed identifier 'report_when'
[307857][      debug] 	Parsed identifier 'is_global_var'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed identifier 'is_static_local_var'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed OR
[307857][      debug] 	Parsed NOT
[307857][      debug] 	Parsed identifier 'has_type'
[307857][      debug] 	Parsed string constant 'dispatch_once_t'
[307857][      debug] 	Parsed predicate
[307857][      debug] 	Parsed atomic formula
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'VarDecl'
[307857][      debug] 	Parsed InNode
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'message'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'severity'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'mode'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 
[307857][      debug] Parsed checker definition
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: WRONG_SCOPE_FOR_DISPATCH_ONCE_T
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE VarDecl: ((NOT((is_global_var() OR is_static_local_var())) AND has_type(dispatch_once_t)))
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Variables of type dispatch_once_t must have global or static scope. The result of using this type with automatic or dynamic allocation is undefined.
[307857][      debug] 
[307857][      debug]     severity=  
[307857][      debug]     WARNING
[307857][      debug] 
[307857][      debug]     mode=  
[307857][      debug]     ON
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 	Parsed identifier 'UNSAFE_CALL_TO_OPTIONAL_METHOD'
[307857][      debug] 	Parsed identifier 'report_when'
[307857][      debug] 	Parsed identifier 'is_call_to_optional_objc_method'
[307857][      debug] 	Parsed formula identifier 'is_call_to_optional_objc_method'
[307857][      debug] 	Parsed identifier 'objc_method_call_within_responds_to_selector_block'
[307857][      debug] 	Parsed formula identifier 'objc_method_call_within_responds_to_selector_block'
[307857][      debug] 	Parsed NOT
[307857][      debug] 	Parsed AND
[307857][      debug] 	Parsed identifier 'ObjCMessageExpr'
[307857][      debug] 	Parsed InNode
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'message'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'suggestion'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'severity'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 	Parsed identifier 'mode'
[307857][      debug] 	Parsed SET clause
[307857][      debug] 
[307857][      debug] Parsed checker definition
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: UNSAFE_CALL_TO_OPTIONAL_METHOD
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE ObjCMessageExpr: ((is_call_to_optional_objc_method() AND NOT(objc_method_call_within_responds_to_selector_block())))
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     This is a call to an `@optional` protocol method. Calling it without checking if its implemented can lead to crashes at run time.
[307857][      debug] 
[307857][      debug]     suggestion=  
[307857][      debug]     Please make sure to test the method is implemented by first calling `if ([object respondsToSelector:@selector(%decl_name%)]) ...` 
[307857][      debug] 
[307857][      debug]     severity=  
[307857][      debug]     ERROR
[307857][      debug] 
[307857][      debug]     mode=  
[307857][      debug]     ON
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] #### Start parsing import macros #####
[307857][      debug] #### Add global macros to import macros #####
[307857][      debug] #### Start Expanding checkers #####
[307857][      debug]  +Start expanding DIRECT_ATOMIC_PROPERTY_ACCESS
[307857][      debug]   -Expanding report_when
[307857][      debug]  +Start expanding ASSIGN_POINTER_WARNING
[307857][      debug]   -Expanding report_when
[307857][      debug]  +Start expanding BAD_POINTER_COMPARISON
[307857][      debug]   -Expanding report_when
[307857][      debug]  +Start expanding STRONG_DELEGATE_WARNING
[307857][      debug]   -Expanding report_when
[307857][      debug]  +Start expanding GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL
[307857][      debug]   -Expanding report_when
[307857][      debug]  +Start expanding CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK
[307857][      debug]   -Expanding report_when
[307857][      debug]  +Start expanding POINTER_TO_INTEGRAL_IMPLICIT_CAST
[307857][      debug]   -Expanding report_when
[307857][      debug]  +Start expanding POINTER_TO_CONST_OBJC_CLASS
[307857][      debug]   -Expanding report_when
[307857][      debug]  +Start expanding DISCOURAGED_WEAK_PROPERTY_CUSTOM_SETTER
[307857][      debug]   -Expanding report_when
[307857][      debug]  +Start expanding WRONG_SCOPE_FOR_DISPATCH_ONCE_T
[307857][      debug]   -Expanding report_when
[307857][      debug]  +Start expanding UNSAFE_CALL_TO_OPTIONAL_METHOD
[307857][      debug]   -Expanding report_when
[307857][      debug] #### Checkers Expanded #####
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: DIRECT_ATOMIC_PROPERTY_ACCESS
[307857][      debug]     severity=  
[307857][      debug]     WARNING
[307857][      debug] 
[307857][      debug]     suggestion=  
[307857][      debug]     Accessing an ivar of an atomic property makes the property nonatomic.
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Direct access to ivar %ivar_name% of an atomic property
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE ObjCIvarRefExpr: (((((NOT(context_in_synchronized_block()) AND is_ivar_atomic()) AND NOT(is_method_property_accessor_of_ivar())) AND NOT(is_objc_constructor())) AND NOT(is_objc_dealloc())))
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: ASSIGN_POINTER_WARNING
[307857][      debug]     severity=  
[307857][      debug]     WARNING
[307857][      debug] 
[307857][      debug]     suggestion=  
[307857][      debug]     Use a different attribute like `strong` or `weak`.
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Property %decl_name% is a pointer type marked with the `assign` attribute
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE ObjCPropertyDecl: ((is_assign_property() AND is_property_pointer_type()))
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: BAD_POINTER_COMPARISON
[307857][      debug]     suggestion=  
[307857][      debug]     Did you mean to use/compare against the unboxed value instead? Please either explicitly compare the NSNumber instance to nil, or use one of the NSNumber accessors before the comparison.
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Implicitly checking whether NSNumber pointer is nil or comparing to integral value
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     (((((((is_binop_with_kind(LAnd) OR is_binop_with_kind(LOr)) OR is_unop_with_kind(LNot)) OR is_unop_with_kind(LNot)) OR ((is_node(IfStmt) OR is_node(ForStmt)) OR is_node(WhileStmt))) AND EX[->_](has_type(NSNumber *))) OR ((((((is_binop_with_kind(EQ) OR is_binop_with_kind(NE)) OR is_binop_with_kind(GT)) OR is_binop_with_kind(GE)) OR is_binop_with_kind(LT)) OR is_binop_with_kind(LE)) AND EX[->_](((is_node(ImplicitCastExpr) AND has_type(NSNumber *)) AND has_cast_kind(IntegralToPointer))))) OR (is_node(ConditionalOperator) AND EX[->Cond](has_type(NSNumber *))))
[307857][      debug] 
[307857][      debug]     bad_conditional=  
[307857][      debug]     (is_node(ConditionalOperator) AND EX[->Cond](has_type(NSNumber *)))
[307857][      debug] 
[307857][      debug]     use_num_as_bool=  
[307857][      debug]     ((bool_op() OR root_is_stmt_expecting_bool()) AND EX[->_](has_type(NSNumber *)))
[307857][      debug] 
[307857][      debug]     root_is_stmt_expecting_bool=  
[307857][      debug]     ((is_node(IfStmt) OR is_node(ForStmt)) OR is_node(WhileStmt))
[307857][      debug] 
[307857][      debug]     comparison_with_integral=  
[307857][      debug]     ((((((is_binop_with_kind(EQ) OR is_binop_with_kind(NE)) OR is_binop_with_kind(GT)) OR is_binop_with_kind(GE)) OR is_binop_with_kind(LT)) OR is_binop_with_kind(LE)) AND EX[->_](((is_node(ImplicitCastExpr) AND has_type(NSNumber *)) AND has_cast_kind(IntegralToPointer))))
[307857][      debug] 
[307857][      debug]     bool_op=  
[307857][      debug]     (((is_binop_with_kind(LAnd) OR is_binop_with_kind(LOr)) OR is_unop_with_kind(LNot)) OR is_unop_with_kind(LNot))
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: STRONG_DELEGATE_WARNING
[307857][      debug]     suggestion=  
[307857][      debug]     In general delegates should be declared weak or assign.
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Property or ivar %decl_name% declared strong
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE ObjCPropertyDecl: ((((declaration_has_name([dD]elegate) AND NOT(declaration_has_name([dD]elegates))) AND NOT(declaration_has_name([qQ]ueue))) AND is_strong_property()))
[307857][      debug] 
[307857][      debug]     name_does_not_contains_queue=  
[307857][      debug]     NOT(declaration_has_name([qQ]ueue))
[307857][      debug] 
[307857][      debug]     name_does_not_contain_delegates=  
[307857][      debug]     NOT(declaration_has_name([dD]elegates))
[307857][      debug] 
[307857][      debug]     name_contains_delegate=  
[307857][      debug]     declaration_has_name([dD]elegate)
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL
[307857][      debug]     suggestion=  
[307857][      debug]     If the function/method call is expensive, it can affect the starting time of the app.
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Global variable %decl_name% is initialized using a function or method call
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE VarDecl: (((((is_objc_extension() AND is_global_var()) AND NOT(is_const_expr_var())) AND NOT(is_init_integral_constant_expr())) AND ET[VarDecl][InitExpr](EF[->_]((((((is_node(CallExpr) AND NOT(call_function(CGPointMake))) OR is_node(CXXTemporaryObjectExpr)) OR is_node(CXXMemberCallExpr)) OR is_node(CXXOperatorCallExpr)) OR is_node(ObjCMessageExpr))))))
[307857][      debug] 
[307857][      debug]     is_initialized_with_expensive_call=  
[307857][      debug]     ET[VarDecl][InitExpr](EF[->_](makes_an_expensive_call()))
[307857][      debug] 
[307857][      debug]     makes_an_expensive_call=  
[307857][      debug]     (((((is_node(CallExpr) AND NOT(call_function(CGPointMake))) OR is_node(CXXTemporaryObjectExpr)) OR is_node(CXXMemberCallExpr)) OR is_node(CXXOperatorCallExpr)) OR is_node(ObjCMessageExpr))
[307857][      debug] 
[307857][      debug]     is_global_but_not_const_variable=  
[307857][      debug]     (((is_objc_extension() AND is_global_var()) AND NOT(is_const_expr_var())) AND NOT(is_init_integral_constant_expr()))
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK
[307857][      debug]     mode=  
[307857][      debug]     ON
[307857][      debug] 
[307857][      debug]     severity=  
[307857][      debug]     ERROR
[307857][      debug] 
[307857][      debug]     suggestion=  
[307857][      debug]     This will very likely cause a crash because C++ References are unmanaged and may be invalid by the time the block executes.
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     C++ Reference variable(s) %cxx_ref_captured_in_block% captured by Objective-C block
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE CallExpr: ((NOT(has_no_escape_attribute()) AND (EF[->_](IN-NODE BlockExpr: (EX[->_]((is_node(BlockDecl) AND captures_cxx_references())))) OR ET[DeclRefExpr][PointerToDecl](ET[VarDecl][InitExpr](EF[->_](IN-NODE BlockExpr: (EX[->_]((is_node(BlockDecl) AND captures_cxx_references())))))))))
[307857][      debug] 
[307857][      debug]     variable_block_definition=  
[307857][      debug]     ET[DeclRefExpr][PointerToDecl](variable_initialized_with_block())
[307857][      debug] 
[307857][      debug]     variable_initialized_with_block=  
[307857][      debug]     ET[VarDecl][InitExpr](block_definition_capture_reference())
[307857][      debug] 
[307857][      debug]     block_definition_capture_reference=  
[307857][      debug]     EF[->_](capture_reference())
[307857][      debug] 
[307857][      debug]     capture_reference=  
[307857][      debug]     IN-NODE BlockExpr: (EX[->_]((is_node(BlockDecl) AND captures_cxx_references())))
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: POINTER_TO_INTEGRAL_IMPLICIT_CAST
[307857][      debug]     doc_url=  
[307857][      debug]     https://clang.llvm.org/docs/DiagnosticsReference.html#wint-conversion
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Implicit conversion from %child_type% to %type% in usage of %name%
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE ImplicitCastExpr: (has_cast_kind(PointerToIntegral))
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: POINTER_TO_CONST_OBJC_CLASS
[307857][      debug]     mode=  
[307857][      debug]     ON
[307857][      debug] 
[307857][      debug]     severity=  
[307857][      debug]     WARNING
[307857][      debug] 
[307857][      debug]     suggestion=  
[307857][      debug]     Consider using `%class_name% *const` instead, meaning
                      the destination of the pointer cannot be changed.
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     `const %class_name%*` may not mean what you want:
                   it represents a mutable pointer pointing to an Objective-C
                   class where the ivars cannot be changed.
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     (is_decl() AND has_type_const_ptr_to_objc_class())
[307857][      debug] 
[307857][      debug]     name_hum_readable=  
[307857][      debug]     Pointer To const Objective-C Class
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: DISCOURAGED_WEAK_PROPERTY_CUSTOM_SETTER
[307857][      debug]     mode=  
[307857][      debug]     OFF
[307857][      debug] 
[307857][      debug]     severity=  
[307857][      debug]     WARNING
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Custom setters are not called when ARC sets weak properties to nil.
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE ObjCMethodDecl: ((EX[->Body](True) AND EX[->AccessorForProperty setter](is_weak_property())))
[307857][      debug] 
[307857][      debug]     is_weak_property_setter=  
[307857][      debug]     EX[->AccessorForProperty setter](is_weak_property())
[307857][      debug] 
[307857][      debug]     has_body=  
[307857][      debug]     EX[->Body](True)
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: WRONG_SCOPE_FOR_DISPATCH_ONCE_T
[307857][      debug]     mode=  
[307857][      debug]     ON
[307857][      debug] 
[307857][      debug]     severity=  
[307857][      debug]     WARNING
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     Variables of type dispatch_once_t must have global or static scope. The result of using this type with automatic or dynamic allocation is undefined.
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE VarDecl: ((NOT((is_global_var() OR is_static_local_var())) AND has_type(dispatch_once_t)))
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Checker name: UNSAFE_CALL_TO_OPTIONAL_METHOD
[307857][      debug]     mode=  
[307857][      debug]     ON
[307857][      debug] 
[307857][      debug]     severity=  
[307857][      debug]     ERROR
[307857][      debug] 
[307857][      debug]     suggestion=  
[307857][      debug]     Please make sure to test the method is implemented by first calling `if ([object respondsToSelector:@selector(%decl_name%)]) ...` 
[307857][      debug] 
[307857][      debug]     message=  
[307857][      debug]     This is a call to an `@optional` protocol method. Calling it without checking if its implemented can lead to crashes at run time.
[307857][      debug] 
[307857][      debug]     report_when=  
[307857][      debug]     IN-NODE ObjCMessageExpr: ((is_call_to_optional_objc_method() AND NOT(objc_method_call_within_responds_to_selector_block())))
[307857][      debug] 
[307857][      debug] 
[307857][      debug] -------------------- 
[307857][      debug] 
[307857][      debug] Converting checkers in (condition, issue) pairs
[307857][      debug] 
[307857][      debug] Making condition and issue desc for checker 'DIRECT_ATOMIC_PROPERTY_ACCESS'
[307857][      debug] 
[307857][      debug] Condition =
[307857][      debug]     IN-NODE ObjCIvarRefExpr: (((((NOT(context_in_synchronized_block()) AND is_ivar_atomic()) AND NOT(is_method_property_accessor_of_ivar())) AND NOT(is_objc_constructor())) AND NOT(is_objc_dealloc())))
[307857][      debug] 
[307857][      debug] Issue_desc = {
[307857][      debug]    Id = DIRECT_ATOMIC_PROPERTY_ACCESS
[307857][      debug] {  Name = Direct Atomic Property Access
[307857][      debug]    Severity = WARNING
[307857][      debug]    Mode = On
[307857][      debug]    Description = Direct access to ivar %ivar_name% of an atomic property
[307857][      debug]    Suggestion = Accessing an ivar of an atomic property makes the property nonatomic.
[307857][      debug]    Docs URL = 
[307857][      debug]    Loc = -1
[307857][      debug] }
[307857][      debug] 
[307857][      debug] 
[307857][      debug] Making condition and issue desc for checker 'ASSIGN_POINTER_WARNING'
[307857][      debug] 
[307857][      debug] Condition =
[307857][      debug]     IN-NODE ObjCPropertyDecl: ((is_assign_property() AND is_property_pointer_type()))
[307857][      debug] 
[307857][      debug] Issue_desc = {
[307857][      debug]    Id = ASSIGN_POINTER_WARNING
[307857][      debug] {  Name = Assign Pointer Warning
[307857][      debug]    Severity = WARNING
[307857][      debug]    Mode = On
[307857][      debug]    Description = Property %decl_name% is a pointer type marked with the `assign` attribute
[307857][      debug]    Suggestion = Use a different attribute like `strong` or `weak`.
[307857][      debug]    Docs URL = 
[307857][      debug]    Loc = -1
[307857][      debug] }
[307857][      debug] 
[307857][      debug] 
[307857][      debug] Making condition and issue desc for checker 'BAD_POINTER_COMPARISON'
[307857][      debug] 
[307857][      debug] Condition =
[307857][      debug]     (((((((is_binop_with_kind(LAnd) OR is_binop_with_kind(LOr)) OR is_unop_with_kind(LNot)) OR is_unop_with_kind(LNot)) OR ((is_node(IfStmt) OR is_node(ForStmt)) OR is_node(WhileStmt))) AND EX[->_](has_type(NSNumber *))) OR ((((((is_binop_with_kind(EQ) OR is_binop_with_kind(NE)) OR is_binop_with_kind(GT)) OR is_binop_with_kind(GE)) OR is_binop_with_kind(LT)) OR is_binop_with_kind(LE)) AND EX[->_](((is_node(ImplicitCastExpr) AND has_type(NSNumber *)) AND has_cast_kind(IntegralToPointer))))) OR (is_node(ConditionalOperator) AND EX[->Cond](has_type(NSNumber *))))
[307857][      debug] 
[307857][      debug] Issue_desc = {
[307857][      debug]    Id = BAD_POINTER_COMPARISON
[307857][      debug] {  Name = Bad Pointer Comparison
[307857][      debug]    Severity = WARNING
[307857][      debug]    Mode = On
[307857][      debug]    Description = Implicitly checking whether NSNumber pointer is nil or comparing to integral value
[307857][      debug]    Suggestion = Did you mean to use/compare against the unboxed value instead? Please either explicitly compare the NSNumber instance to nil, or use one of the NSNumber accessors before the comparison.
[307857][      debug]    Docs URL = 
[307857][      debug]    Loc = -1
[307857][      debug] }
[307857][      debug] 
[307857][      debug] 
[307857][      debug] Making condition and issue desc for checker 'STRONG_DELEGATE_WARNING'
[307857][      debug] 
[307857][      debug] Condition =
[307857][      debug]     IN-NODE ObjCPropertyDecl: ((((declaration_has_name([dD]elegate) AND NOT(declaration_has_name([dD]elegates))) AND NOT(declaration_has_name([qQ]ueue))) AND is_strong_property()))
[307857][      debug] 
[307857][      debug] Issue_desc = {
[307857][      debug]    Id = STRONG_DELEGATE_WARNING
[307857][      debug] {  Name = Strong Delegate Warning
[307857][      debug]    Severity = WARNING
[307857][      debug]    Mode = On
[307857][      debug]    Description = Property or ivar %decl_name% declared strong
[307857][      debug]    Suggestion = In general delegates should be declared weak or assign.
[307857][      debug]    Docs URL = 
[307857][      debug]    Loc = -1
[307857][      debug] }
[307857][      debug] 
[307857][      debug] 
[307857][      debug] Making condition and issue desc for checker 'GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL'
[307857][      debug] 
[307857][      debug] Condition =
[307857][      debug]     IN-NODE VarDecl: (((((is_objc_extension() AND is_global_var()) AND NOT(is_const_expr_var())) AND NOT(is_init_integral_constant_expr())) AND ET[VarDecl][InitExpr](EF[->_]((((((is_node(CallExpr) AND NOT(call_function(CGPointMake))) OR is_node(CXXTemporaryObjectExpr)) OR is_node(CXXMemberCallExpr)) OR is_node(CXXOperatorCallExpr)) OR is_node(ObjCMessageExpr))))))
[307857][      debug] 
[307857][      debug] Issue_desc = {
[307857][      debug]    Id = GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL
[307857][      debug] {  Name = Global Variable Initialized With Function Or Method Call
[307857][      debug]    Severity = WARNING
[307857][      debug]    Mode = On
[307857][      debug]    Description = Global variable %decl_name% is initialized using a function or method call
[307857][      debug]    Suggestion = If the function/method call is expensive, it can affect the starting time of the app.
[307857][      debug]    Docs URL = 
[307857][      debug]    Loc = -1
[307857][      debug] }
[307857][      debug] 
[307857][      debug] 
[307857][      debug] Making condition and issue desc for checker 'CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK'
[307857][      debug] 
[307857][      debug] Condition =
[307857][      debug]     IN-NODE CallExpr: ((NOT(has_no_escape_attribute()) AND (EF[->_](IN-NODE BlockExpr: (EX[->_]((is_node(BlockDecl) AND captures_cxx_references())))) OR ET[DeclRefExpr][PointerToDecl](ET[VarDecl][InitExpr](EF[->_](IN-NODE BlockExpr: (EX[->_]((is_node(BlockDecl) AND captures_cxx_references())))))))))
[307857][      debug] 
[307857][      debug] Issue_desc = {
[307857][      debug]    Id = CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK
[307857][      debug] {  Name = Cxx Reference Captured In Objc Block
[307857][      debug]    Severity = ERROR
[307857][      debug]    Mode = On
[307857][      debug]    Description = C++ Reference variable(s) %cxx_ref_captured_in_block% captured by Objective-C block
[307857][      debug]    Suggestion = This will very likely cause a crash because C++ References are unmanaged and may be invalid by the time the block executes.
[307857][      debug]    Docs URL = 
[307857][      debug]    Loc = -1
[307857][      debug] }
[307857][      debug] 
[307857][      debug] 
[307857][      debug] Making condition and issue desc for checker 'POINTER_TO_INTEGRAL_IMPLICIT_CAST'
[307857][      debug] 
[307857][      debug] Condition =
[307857][      debug]     IN-NODE ImplicitCastExpr: (has_cast_kind(PointerToIntegral))
[307857][      debug] 
[307857][      debug] Issue_desc = {
[307857][      debug]    Id = POINTER_TO_INTEGRAL_IMPLICIT_CAST
[307857][      debug] {  Name = Pointer To Integral Implicit Cast
[307857][      debug]    Severity = WARNING
[307857][      debug]    Mode = On
[307857][      debug]    Description = Implicit conversion from %child_type% to %type% in usage of %name%
[307857][      debug]    Suggestion = 
[307857][      debug]    Docs URL = https://clang.llvm.org/docs/DiagnosticsReference.html#wint-conversion
[307857][      debug]    Loc = -1
[307857][      debug] }
[307857][      debug] 
[307857][      debug] 
[307857][      debug] Making condition and issue desc for checker 'POINTER_TO_CONST_OBJC_CLASS'
[307857][      debug] 
[307857][      debug] Condition =
[307857][      debug]     (is_decl() AND has_type_const_ptr_to_objc_class())
[307857][      debug] 
[307857][      debug] Issue_desc = {
[307857][      debug]    Id = POINTER_TO_CONST_OBJC_CLASS
[307857][      debug] {  Name = Pointer To const Objective-C Class
[307857][      debug]    Severity = WARNING
[307857][      debug]    Mode = On
[307857][      debug]    Description = `const %class_name%*` may not mean what you want:
                   it represents a mutable pointer pointing to an Objective-C
                   class where the ivars cannot be changed.
[307857][      debug]    Suggestion = Consider using `%class_name% *const` instead, meaning
                      the destination of the pointer cannot be changed.
[307857][      debug]    Docs URL = 
[307857][      debug]    Loc = -1
[307857][      debug] }
[307857][      debug] 
[307857][      debug] 
[307857][      debug] Making condition and issue desc for checker 'DISCOURAGED_WEAK_PROPERTY_CUSTOM_SETTER'
[307857][      debug] 
[307857][      debug] Condition =
[307857][      debug]     IN-NODE ObjCMethodDecl: ((EX[->Body](True) AND EX[->AccessorForProperty setter](is_weak_property())))
[307857][      debug] 
[307857][      debug] Issue_desc = {
[307857][      debug]    Id = DISCOURAGED_WEAK_PROPERTY_CUSTOM_SETTER
[307857][      debug] {  Name = Discouraged Weak Property Custom Setter
[307857][      debug]    Severity = WARNING
[307857][      debug]    Mode = Off
[307857][      debug]    Description = Custom setters are not called when ARC sets weak properties to nil.
[307857][      debug]    Suggestion = 
[307857][      debug]    Docs URL = 
[307857][      debug]    Loc = -1
[307857][      debug] }
[307857][      debug] 
[307857][      debug] 
[307857][      debug] Making condition and issue desc for checker 'WRONG_SCOPE_FOR_DISPATCH_ONCE_T'
[307857][      debug] 
[307857][      debug] Condition =
[307857][      debug]     IN-NODE VarDecl: ((NOT((is_global_var() OR is_static_local_var())) AND has_type(dispatch_once_t)))
[307857][      debug] 
[307857][      debug] Issue_desc = {
[307857][      debug]    Id = WRONG_SCOPE_FOR_DISPATCH_ONCE_T
[307857][      debug] {  Name = Wrong Scope For Dispatch Once T
[307857][      debug]    Severity = WARNING
[307857][      debug]    Mode = On
[307857][      debug]    Description = Variables of type dispatch_once_t must have global or static scope. The result of using this type with automatic or dynamic allocation is undefined.
[307857][      debug]    Suggestion = 
[307857][      debug]    Docs URL = 
[307857][      debug]    Loc = -1
[307857][      debug] }
[307857][      debug] 
[307857][      debug] 
[307857][      debug] Making condition and issue desc for checker 'UNSAFE_CALL_TO_OPTIONAL_METHOD'
[307857][      debug] 
[307857][      debug] Condition =
[307857][      debug]     IN-NODE ObjCMessageExpr: ((is_call_to_optional_objc_method() AND NOT(objc_method_call_within_responds_to_selector_block())))
[307857][      debug] 
[307857][      debug] Issue_desc = {
[307857][      debug]    Id = UNSAFE_CALL_TO_OPTIONAL_METHOD
[307857][      debug] {  Name = Unsafe Call To Optional Method
[307857][      debug]    Severity = ERROR
[307857][      debug]    Mode = On
[307857][      debug]    Description = This is a call to an `@optional` protocol method. Calling it without checking if its implemented can lead to crashes at run time.
[307857][      debug]    Suggestion = Please make sure to test the method is implemented by first calling `if ([object respondsToSelector:@selector(%decl_name%)]) ...` 
[307857][      debug]    Docs URL = 
[307857][      debug]    Loc = -1
[307857][      debug] }
[307857][      debug] 
[307857][      debug] Start linting file tutorial/command-injection2.c with rules: 
[307857][      debug] DIRECT_ATOMIC_PROPERTY_ACCESS
[307857][      debug] ASSIGN_POINTER_WARNING
[307857][      debug] BAD_POINTER_COMPARISON
[307857][      debug] STRONG_DELEGATE_WARNING
[307857][      debug] GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL
[307857][      debug] CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK
[307857][      debug] POINTER_TO_INTEGRAL_IMPLICIT_CAST
[307857][      debug] POINTER_TO_CONST_OBJC_CLASS
[307857][      debug] DISCOURAGED_WEAK_PROPERTY_CUSTOM_SETTER
[307857][      debug] WRONG_SCOPE_FOR_DISPATCH_ONCE_T
[307857][      debug] UNSAFE_CALL_TO_OPTIONAL_METHOD
[307857][      debug] 
[307857][      debug] Starting parsing type string 'dispatch_once_t'
[307857][      debug] 	Type_name parsed: `dispatch_once_t`
[307857][      debug] 	Type effectively parsed: `TypeName (dispatch_once_t)`
[307857][      debug] 
[307857][      debug] Comparing c_type/abs_ctype for equality... Type compared: 
[307857][      debug] c_type = `<"ConstantArrayType":({"pointer":2975},{"element_type":{"type_ptr":3000},"stride":1},255)>`  
[307857][      debug] abs_ctype =`TypeName (dispatch_once_t)`
[307857][      debug] [WARNING:] Type Comparison failed... This might indicate that the types are different or the specified type is internally represented in a different way and therefore not recognized.
[307857][      debug] #####POINTER LOOP UP: '2979'
[307857][      debug] #####POINTER LOOK UP: '1823'
[307857][      debug] #####POINTER LOOK UP: '1823'
[307857][      debug] #####POINTER LOOK UP: '2976'
[307857][      debug] #####POINTER LOOK UP: '2971'
[307857][      debug] #####POINTER LOOP UP: '2991'
[307857][      debug] #####POINTER LOOK UP: '1529'
[307857][      debug] #####POINTER LOOK UP: '1529'
[307857][      debug] #####POINTER LOOK UP: '2976'
[307857][      debug] End linting file tutorial/command-injection2.c
[307857][      debug] 
[307857][      debug]  Start building call/cfg graph for 'tutorial/command-injection2.c'....
[307857][      debug] 
[307857][      debug]  Start creating icfg
[307857][      debug] 
[307857][      debug] Creating a new procdesc for function: 'main'
[307857][      debug] 
[307857][      debug] 
[307857][      debug] ms = Method main [argc, int (is_no_escape_block=false),argv, char** (is_no_escape_block=false)]->int ({"file":"/home/wooseok/workspace/infer-experiment/tutorial/command-injection2.c","line":10,"column":1},{"file":"/home/wooseok/workspace/infer-experiment/tutorial/command-injection2.c","line":14,"column":1})(passed_as_noescape_block_to=[None])
[307857][      debug] 
[307857][      debug] 
[307857][      debug] 
[307857][      debug] >>---------- ADDING METHOD: 'main' ---------<<
[307857][      debug] 
[307857][      debug] 
[307857][      debug] 
[307857][      debug] >>---------- Start translating body of function: 'main' ---------<<
[307857][      debug] 
[307857][      debug] CompoundStmt{}
[307857][      debug] <Compound|
[307857][      debug]    
[307857][      debug]    DeclStmt{}
[307857][      debug]    +cmd
[307857][      debug]    
[307857][      debug]    CallExpr{cmd}
[307857][      debug]    
[307857][      debug]    ImplicitCastExpr{cmd}
[307857][      debug]    
[307857][      debug]    DeclRefExpr{cmd}
[307857][      debug]    
[307857][      debug]    ImplicitCastExpr{cmd}
[307857][      debug]    
[307857][      debug]    DeclRefExpr{cmd}
[307857][      debug]    
[307857][      debug]    ImplicitCastExpr{cmd}
[307857][      debug]    
[307857][      debug]    ImplicitCastExpr{cmd}
[307857][      debug]    
[307857][      debug]    ArraySubscriptExpr{cmd}
[307857][      debug]    
[307857][      debug]    ImplicitCastExpr{cmd}
[307857][      debug]    
[307857][      debug]    DeclRefExpr{cmd}
[307857][      debug]    
[307857][      debug]    IntegerLiteral{cmd}
[307857][      debug]    
[307857][      debug]    CallExpr{cmd}
[307857][      debug]    
[307857][      debug]    ImplicitCastExpr{cmd}
[307857][      debug]    
[307857][      debug]    DeclRefExpr{cmd}
[307857][      debug]    
[307857][      debug]    ImplicitCastExpr{cmd}
[307857][      debug]    
[307857][      debug]    ImplicitCastExpr{cmd}
[307857][      debug]    
[307857][      debug]    DeclRefExpr{cmd}
[307857][      debug]    
[307857][      debug] /Compound>~[2972:cmd]
[307857][      debug] Translating statement 'CompoundStmt' (pointer= '2972')
[307857][      debug]   trans_state={succ_nodes=[2]; continuation=[None] priority=Free;
[307857][      debug]               var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]               is_fst_arg_objc_instance_method_call=false;
[307857][      debug]               passed_as_noescape_block_to=[None]}
[307857][      debug]   Translating statement 'CallExpr' (pointer= '2989')
[307857][      debug]     trans_state={succ_nodes=[2]; continuation=[None] priority=Free;
[307857][      debug]                 var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]                 is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                 passed_as_noescape_block_to=[None]}
[307857][      debug]     Priority is free. Locking priority node in 2989
[307857][      debug]     Translating statement 'ImplicitCastExpr' (pointer= '2990')
[307857][      debug]       trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2989);
[307857][      debug]                   var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]                   is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                   passed_as_noescape_block_to=[None]}
[307857][      debug]       Translating statement 'DeclRefExpr' (pointer= '2991')
[307857][      debug]         trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2989);
[307857][      debug]                     var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]                     is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                     passed_as_noescape_block_to=[None]}
[307857][      debug]         
[307857][      debug]         Creating a new procdesc for function: 'system'
[307857][      debug]         
[307857][      debug] 
[307857][      debug] ms = Method system [__command, char const * (is_no_escape_block=false)]->int ({"file":"/usr/include/stdlib.h","line":784,"column":1},{"file":"/usr/include/stdlib.h","line":784,"column":41})(passed_as_noescape_block_to=[None])
[307857][      debug] 
[307857][      debug] 
[307857][      debug] Result of translating statement 'DeclRefExpr' (pointer= '2991')
[307857][      debug] control={root_nodes=[]; leaf_nodes=[]; instrs=[]; initd_exps=[]}
[307857][      debug] 
[307857][      debug] WARNING: Missing translation for Cast Kind <"FunctionToPointerDecay">. The construct has been ignored...
[307857][      debug] 
[307857][      debug] Result of translating statement 'ImplicitCastExpr' (pointer= '2990')
[307857][      debug] control={root_nodes=[]; leaf_nodes=[]; instrs=[]; initd_exps=[]}
[307857][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2993')
[307857][      debug]   trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2989);
[307857][      debug]               var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]               is_fst_arg_objc_instance_method_call=false;
[307857][      debug]               passed_as_noescape_block_to=[None]}
[307857][      debug]   Translating statement 'ImplicitCastExpr' (pointer= '2994')
[307857][      debug]     trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2989);
[307857][      debug]                 var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]                 is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                 passed_as_noescape_block_to=[None]}
[307857][      debug]     Translating statement 'DeclRefExpr' (pointer= '2995')
[307857][      debug]       trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2989);
[307857][      debug]                   var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]                   is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                   passed_as_noescape_block_to=[None]}
[307857][      debug]       var_deref_trans for &cmd:char[255*1]
[307857][      debug]       
[307857][      debug]       
[307857][      debug]     Result of translating statement 'DeclRefExpr' (pointer= '2995')
[307857][      debug]     control={root_nodes=[]; leaf_nodes=[]; instrs=[]; initd_exps=[]}
[307857][      debug]     
[307857][      debug]     WARNING: Missing translation for Cast Kind <"ArrayToPointerDecay">. The construct has been ignored...
[307857][      debug]     
[307857][      debug]   Result of translating statement 'ImplicitCastExpr' (pointer= '2994')
[307857][      debug]   control={root_nodes=[]; leaf_nodes=[]; instrs=[]; initd_exps=[]}
[307857][      debug]   
[307857][      debug] Result of translating statement 'ImplicitCastExpr' (pointer= '2993')
[307857][      debug] control={root_nodes=[]; leaf_nodes=[]; instrs=[]; initd_exps=[]}
[307857][      debug] collected controls: {root_nodes=[]; leaf_nodes=[];
[307857][      debug]                     instrs=[n$0=_fun_system(&cmd:char*) [line 13, column 3]];
[307857][      debug]                     initd_exps=[]}
[307857][      debug] Created node 3 with instrs [n$0=_fun_system(&cmd:char*) [line 13, column 3]], returning control 
[307857][      debug] {root_nodes=[3]; leaf_nodes=[3]; instrs=[]; initd_exps=[]}
[307857][      debug] 
[307857][      debug] Result of translating statement 'CallExpr' (pointer= '2989')
[307857][      debug] control={root_nodes=[3]; leaf_nodes=[3]; instrs=[]; initd_exps=[]}
[307857][      debug] Translating statement 'CallExpr' (pointer= '2977')
[307857][      debug]   trans_state={succ_nodes=[3]; continuation=[None] priority=Free;
[307857][      debug]               var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]               is_fst_arg_objc_instance_method_call=false;
[307857][      debug]               passed_as_noescape_block_to=[None]}
[307857][      debug]   Priority is free. Locking priority node in 2977
[307857][      debug]   Translating statement 'ImplicitCastExpr' (pointer= '2978')
[307857][      debug]     trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2977);
[307857][      debug]                 var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]                 is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                 passed_as_noescape_block_to=[None]}
[307857][      debug]     Translating statement 'DeclRefExpr' (pointer= '2979')
[307857][      debug]       trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2977);
[307857][      debug]                   var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]                   is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                   passed_as_noescape_block_to=[None]}
[307857][      debug]       
[307857][      debug]       Creating a new procdesc for function: 'strcat'
[307857][      debug]       
[307857][      debug] 
[307857][      debug] ms = Method strcat [__dest, char* (is_no_escape_block=false),__src, char const * (is_no_escape_block=false)]->char* ({"file":"/usr/include/string.h","line":130,"column":1},{"file":"/usr/include/string.h","line":131,"column":14})(passed_as_noescape_block_to=[None])
[307857][      debug] 
[307857][      debug] 
[307857][      debug] Result of translating statement 'DeclRefExpr' (pointer= '2979')
[307857][      debug] control={root_nodes=[]; leaf_nodes=[]; instrs=[]; initd_exps=[]}
[307857][      debug] 
[307857][      debug] WARNING: Missing translation for Cast Kind <"FunctionToPointerDecay">. The construct has been ignored...
[307857][      debug] 
[307857][      debug] Result of translating statement 'ImplicitCastExpr' (pointer= '2978')
[307857][      debug] control={root_nodes=[]; leaf_nodes=[]; instrs=[]; initd_exps=[]}
[307857][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2981')
[307857][      debug]   trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2977);
[307857][      debug]               var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]               is_fst_arg_objc_instance_method_call=false;
[307857][      debug]               passed_as_noescape_block_to=[None]}
[307857][      debug]   Translating statement 'DeclRefExpr' (pointer= '2982')
[307857][      debug]     trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2977);
[307857][      debug]                 var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]                 is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                 passed_as_noescape_block_to=[None]}
[307857][      debug]     var_deref_trans for &cmd:char[255*1]
[307857][      debug]     
[307857][      debug]     
[307857][      debug]   Result of translating statement 'DeclRefExpr' (pointer= '2982')
[307857][      debug]   control={root_nodes=[]; leaf_nodes=[]; instrs=[]; initd_exps=[]}
[307857][      debug]   
[307857][      debug]   WARNING: Missing translation for Cast Kind <"ArrayToPointerDecay">. The construct has been ignored...
[307857][      debug]   
[307857][      debug] Result of translating statement 'ImplicitCastExpr' (pointer= '2981')
[307857][      debug] control={root_nodes=[]; leaf_nodes=[]; instrs=[]; initd_exps=[]}
[307857][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2983')
[307857][      debug]   trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2977);
[307857][      debug]               var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]               is_fst_arg_objc_instance_method_call=false;
[307857][      debug]               passed_as_noescape_block_to=[None]}
[307857][      debug]   Translating statement 'ImplicitCastExpr' (pointer= '2984')
[307857][      debug]     trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2977);
[307857][      debug]                 var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]                 is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                 passed_as_noescape_block_to=[None]}
[307857][      debug]     Translating statement 'ArraySubscriptExpr' (pointer= '2985')
[307857][      debug]       trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2977);
[307857][      debug]                   var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]                   is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                   passed_as_noescape_block_to=[None]}
[307857][      debug]       Translating statement 'ImplicitCastExpr' (pointer= '2986')
[307857][      debug]         trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2977);
[307857][      debug]                     var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]                     is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                     passed_as_noescape_block_to=[None]}
[307857][      debug]         Translating statement 'DeclRefExpr' (pointer= '2987')
[307857][      debug]           trans_state={succ_nodes=[]; continuation=[None]
[307857][      debug]                       priority=Busy(2977); var_exp_typ=[None];
[307857][      debug]                       opaque_exp=[None];
[307857][      debug]                       is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                       passed_as_noescape_block_to=[None]}
[307857][      debug]           var_deref_trans for &argv:char**
[307857][      debug]           
[307857][      debug]           
[307857][      debug]         Result of translating statement 'DeclRefExpr' (pointer= '2987')
[307857][      debug]         control={root_nodes=[]; leaf_nodes=[]; instrs=[]; initd_exps=[]}
[307857][      debug]         
[307857][      debug]       Result of translating statement 'ImplicitCastExpr' (pointer= '2986')
[307857][      debug]       control={root_nodes=[]; leaf_nodes=[];
[307857][      debug]               instrs=[n$1=*&argv:char** [line 12, column 15]]; initd_exps=[]}
[307857][      debug]       Translating statement 'IntegerLiteral' (pointer= '2988')
[307857][      debug]         trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2977);
[307857][      debug]                     var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]                     is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                     passed_as_noescape_block_to=[None]}
[307857][      debug]         
[307857][      debug]       Result of translating statement 'IntegerLiteral' (pointer= '2988')
[307857][      debug]       control={root_nodes=[]; leaf_nodes=[]; instrs=[]; initd_exps=[]}
[307857][      debug]       
[307857][      debug]     Result of translating statement 'ArraySubscriptExpr' (pointer= '2985')
[307857][      debug]     control={root_nodes=[]; leaf_nodes=[];
[307857][      debug]             instrs=[n$1=*&argv:char** [line 12, column 15]]; initd_exps=[]}
[307857][      debug]     
[307857][      debug]   Result of translating statement 'ImplicitCastExpr' (pointer= '2984')
[307857][      debug]   control={root_nodes=[]; leaf_nodes=[];
[307857][      debug]           instrs=[n$1=*&argv:char** [line 12, column 15];n$2=*n$1[1]:char* [line 12, column 15]];
[307857][      debug]           initd_exps=[]}
[307857][      debug]   
[307857][      debug] Result of translating statement 'ImplicitCastExpr' (pointer= '2983')
[307857][      debug] control={root_nodes=[]; leaf_nodes=[];
[307857][      debug]         instrs=[n$1=*&argv:char** [line 12, column 15];n$2=*n$1[1]:char* [line 12, column 15]];
[307857][      debug]         initd_exps=[]}
[307857][      debug] collected controls: {root_nodes=[]; leaf_nodes=[];
[307857][      debug]                     instrs=[n$1=*&argv:char** [line 12, column 15];n$2=*n$1[1]:char* [line 12, column 15];n$3=_fun_strcat(&cmd:char*,n$2:char*) [line 12, column 3]];
[307857][      debug]                     initd_exps=[]}
[307857][      debug] Created node 4 with instrs [n$1=*&argv:char** [line 12, column 15];n$2=*n$1[1]:char* [line 12, column 15];n$3=_fun_strcat(&cmd:char*,n$2:char*) [line 12, column 3]], returning control 
[307857][      debug] {root_nodes=[4]; leaf_nodes=[4]; instrs=[]; initd_exps=[]}
[307857][      debug] 
[307857][      debug] Result of translating statement 'CallExpr' (pointer= '2977')
[307857][      debug] control={root_nodes=[4]; leaf_nodes=[4]; instrs=[]; initd_exps=[]}
[307857][      debug] Translating statement 'DeclStmt' (pointer= '2973')
[307857][      debug]   trans_state={succ_nodes=[4]; continuation=[None] priority=Free;
[307857][      debug]               var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]               is_fst_arg_objc_instance_method_call=false;
[307857][      debug]               passed_as_noescape_block_to=[None]}
[307857][      debug]   init_expr_trans false {succ_nodes=[4]; continuation=[None] priority=Free;
[307857][      debug]                         var_exp_typ=[None]; opaque_exp=[None];
[307857][      debug]                         is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                         passed_as_noescape_block_to=[None]} (&cmd,
[307857][      debug]   char[255*1]) <?qual_type> <stmt_info> [Some StringLiteral]
[307857][      debug]   Force-locking priority node in 2973 (was Free)
[307857][      debug]   Priority is Busy(2973). No claim possible in -1
[307857][      debug]   Translating statement 'StringLiteral' (pointer= '2974')
[307857][      debug]     trans_state={succ_nodes=[]; continuation=[None] priority=Busy(2973);
[307857][      debug]                 var_exp_typ=[Some (&cmd,char[255*1])]; opaque_exp=[None];
[307857][      debug]                 is_fst_arg_objc_instance_method_call=false;
[307857][      debug]                 passed_as_noescape_block_to=[None]}
[307857][      debug]     
[307857][      debug]   Result of translating statement 'StringLiteral' (pointer= '2974')
[307857][      debug]   control={root_nodes=[]; leaf_nodes=[]; instrs=[]; initd_exps=[]}
[307857][      debug]   init expr result: {root_nodes=[]; leaf_nodes=[]; instrs=[]; initd_exps=[]}
[307857][      debug]   Sub-expr did not initialize &cmd, initializing with "/usr/bin/cat "
[307857][      debug]   sending init_expr_trans results to parent
[307857][      debug]   collected controls: {root_nodes=[]; leaf_nodes=[];
[307857][      debug]                       instrs=[*&cmd:char[255*1]="/usr/bin/cat " [line 11, column 3]];
[307857][      debug]                       initd_exps=[]}
[307857][      debug]   Delegating node creation to parent with control {root_nodes=[];
[307857][      debug]                                                   leaf_nodes=[];
[307857][      debug]                                                   instrs=[*&cmd:char[255*1]="/usr/bin/cat " [line 11, column 3]];
[307857][      debug]                                                   initd_exps=[]}
[307857][      debug]   sequential composition :
[307857][      debug]     {root_nodes=[]; leaf_nodes=[];
[307857][      debug]     instrs=[VARIABLE_DECLARED(cmd:char[255*1]); [line 11, column 3]];
[307857][      debug]     initd_exps=[]}
[307857][      debug]   ;
[307857][      debug]     {root_nodes=[]; leaf_nodes=[];
[307857][      debug]     instrs=[*&cmd:char[255*1]="/usr/bin/cat " [line 11, column 3]];
[307857][      debug]     initd_exps=[]}
[307857][      debug]   collected controls: {root_nodes=[]; leaf_nodes=[];
[307857][      debug]                       instrs=[VARIABLE_DECLARED(cmd:char[255*1]); [line 11, column 3];*&cmd:char[255*1]="/usr/bin/cat " [line 11, column 3]];
[307857][      debug]                       initd_exps=[]}
[307857][      debug]   Created node 5 with instrs [VARIABLE_DECLARED(cmd:char[255*1]); [line 11, column 3];*&cmd:char[255*1]="/usr/bin/cat " [line 11, column 3]], returning control 
[307857][      debug]   {root_nodes=[5]; leaf_nodes=[5]; instrs=[]; initd_exps=[]}
[307857][      debug]   res_trans_tmp.control={root_nodes=[5]; leaf_nodes=[5]; instrs=[];
[307857][      debug]                         initd_exps=[]}
[307857][      debug]   
[307857][      debug] Result of translating statement 'DeclStmt' (pointer= '2973')
[307857][      debug] control={root_nodes=[5]; leaf_nodes=[5]; instrs=[]; initd_exps=[]}
[307857][      debug] 
[307857][      debug] Result of translating statement 'CompoundStmt' (pointer= '2972')
[307857][      debug] control={root_nodes=[5]; leaf_nodes=[3]; instrs=[]; initd_exps=[]}
[307857][      debug] 
[307857][      debug]  Finished creating icfg
[307857][      debug] 
[307857][      debug]  End building call/cfg graph for 'tutorial/command-injection2.c'.
[307857][      debug] Stored on disk:METHOD SIGNATURES
[307857][      debug]                main [defined, Return type: int, Formals:  argc:int argv:char**, Locals:  cmd:char[255*1]]
[307857][      debug]                strcat [undefined, Return type: char*, Formals:  __dest:char* __src:char const *, Locals: None]
[307857][      debug]                system [undefined, Return type: int, Formals:  __command:char const *, Locals: None]
[307857][      debug]                
[307857][      debug] End linting, translating the AST of file stdin of tutorial/command-injection2.c... OK!
[307857][      debug] Elapsed: 62.915ms.
[307857][      debug] GC stats for capture:
[307857][      debug]   minor_words: 2.36125e+06
[307857][      debug]   promoted_words: 432972
[307857][      debug]   major_words: 451200
[307857][      debug]   minor_collections: 4
[307857][      debug]   major_collections: 1
[307857][      debug]   compactions: 0
[307857][      debug]   top_heap_words: 875008
[307857][      debug]   
[307857][   progress] Found 1 source file to analyze in /home/wooseok/workspace/infer-experiment/infer-out
[307857][   progress] tutorial/command-injection2.c starting
[307857][      debug] alarm start line 13, column 3
alarm line 10, column 1

[307857][      debug] tutorial/command-injection2.c:13: ERROR: Api Misuse CmdInjection
[307857][      debug] 
[307857][      debug] 
[307857][   progress] tutorial/command-injection2.c DONE
[307857][      debug] Elapsed analysis time: main: 7.701ms
[307857][      debug] Backend stats:
[307857][      debug]   summary_file_try_load= 30
[307857][      debug]   summary_read_from_disk= 0
[307857][      debug]   summary_cache_hits= 133 (81%)
[307857][      debug]   summary_cache_misses= 30
[307857][      debug]   ondemand_procs_analyzed= 1
[307857][      debug]   ondemand_local_cache_hits= 0 (0%)
[307857][      debug]   ondemand_local_cache_misses= 2
[307857][      debug]   proc_locker_lock_time_user= 0.00000000
[307857][      debug]   proc_locker_lock_time_sys= 0.00000000
[307857][      debug]   proc_locker_lock_time_wall= 0.00000000
[307857][      debug]   proc_locker_unlock_time_user= 0.00000000
[307857][      debug]   proc_locker_unlock_time_sys= 0.00000000
[307857][      debug]   proc_locker_unlock_time_wall= 0.00000000
[307857][      debug]   restart_scheduler_useful_time_user= 0.00000000
[307857][      debug]   restart_scheduler_useful_time_sys= 0.00000000
[307857][      debug]   restart_scheduler_useful_time_wall= 0.00000000
[307857][      debug]   restart_scheduler_total_time_user= 0.00000000
[307857][      debug]   restart_scheduler_total_time_sys= 0.00000000
[307857][      debug]   restart_scheduler_total_time_wall= 0.00000000
[307857][      debug]   
[307857][      debug] GC stats for backend_stats.:
[307857][      debug]   minor_words: 1.3949e+06
[307857][      debug]   promoted_words: 4930
[307857][      debug]   major_words: 20055
[307857][      debug]   minor_collections: 1
[307857][      debug]   major_collections: 0
[307857][      debug]   compactions: 0
[307857][      debug]   top_heap_words: 875008
[307857][      debug]   
[307857][      debug] Analysis phase finished in 9.43ms
[307857][      debug] backend_stats.scheduler_process_analysis_time_user= 0.00260500
[307857][      debug] backend_stats.scheduler_process_analysis_time_sys= 0.00682200
[307857][      debug] backend_stats.scheduler_process_analysis_time_wall= 0.00942986
[307857][      debug] GC stats for analysis_scheduler:
[307857][      debug]   minor_words: 1.40282e+06
[307857][      debug]   promoted_words: 4930
[307857][      debug]   major_words: 20568
[307857][      debug]   minor_collections: 1
[307857][      debug]   major_collections: 0
[307857][      debug]   compactions: 0
[307857][      debug]   top_heap_words: 875008
[307857][      debug]   
[307857][      debug] GC stats for report:
[307857][      debug]   minor_words: 14814
[307857][      debug]   promoted_words: 0
[307857][      debug]   major_words: 0
[307857][      debug]   minor_collections: 0
[307857][      debug]   major_collections: 0
[307857][      debug]   compactions: 0
[307857][      debug]   top_heap_words: 875008
[307857][      debug]   
[307857][      debug] GC stats for main_process_full:
[307857][      debug]   minor_words: 5.61021e+06
[307857][      debug]   promoted_words: 609060
[307857][      debug]   major_words: 842421
[307857][      debug]   minor_collections: 19
[307857][      debug]   major_collections: 4
[307857][      debug]   compactions: 1
[307857][      debug]   top_heap_words: 875008
[307857][      debug]   
